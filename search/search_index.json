{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#recent-updates","title":"Recent Updates","text":"<ul> <li>Mkdocs</li> <li>Free Games Claimer</li> <li>Filebrowser</li> <li>Bookstack</li> <li>Basic Server Setup, Caddy, Docker, JDownloader</li> <li>Debian-Based Server Setup</li> <li>Samba(SMB) Setup</li> <li>jlesage VNC Apps</li> <li>Useful Plugins</li> <li>Minecraft Prep and Install</li> </ul>"},{"location":"mkdocs/","title":"Mkdocs","text":""},{"location":"mkdocs/#mkdocs-gotchas","title":"Mkdocs Gotchas","text":"<ul> <li><code>yaml</code> highlighting is broken with <code>mdx-breakless-lists</code></li> <li>when using heading <code>#</code>, if there are no line breaks between headings, any lists that is after content of the second heading will not be rendered properly, even with <code>mdx-breakless-lists</code></li> <li></li> <li>when referencing a subheading in another file, mkdocs uses <code>[](file.md#heading-with-space)</code> while obsidian uses <code>[](file.md#heading%20with%20space)</code></li> <li>Before switching from lists to normal content, a line break is needed, otherwise the text below will be rendered with a indent</li> </ul>"},{"location":"mkdocs/#admonitioncallouts","title":"Admonition/Callouts","text":"Mkdocs native callout <p>callout content mkdocs</p> <p>Nested</p> <p>Nesting</p> <ul> <li><code>???</code> is also valid syntax for mkdocs</li> <li><code>???+</code> makes the callout collapsible and opens by default, while <code>???-</code> makes it closed by default <pre><code>!!! notes \"Title\"\n    content\n</code></pre> Obsidian callouts requires the plugin <code>mkdocs-callouts</code></li> </ul> Obsidian Native Callout <p>Callout content mkdocs</p> <p>Nested callout</p> <p>callout</p> <pre><code>&gt; [!notes] Callout title\n&gt; Callout content\n</code></pre> <ul> <li>obsidian callout syntax also follows the same <code>+</code>,<code>-</code> for collapsing</li> </ul> <p>Available callouts include <code>notes</code>, <code>info</code>, <code>warning</code>, <code>danger</code>, <code>success</code>, <code>failure</code>, <code>example</code>, <code>abstract</code>, <code>tip</code>, <code>question</code>, <code>bug</code>.  </p>"},{"location":"mkdocs/#keys-caret-mark-tilde","title":"Keys, Caret, Mark, Tilde","text":"<p>Keys <code>++ctrl+alt+plus++</code> Ctrl+Alt++ mark highlighting tilde strikethrough</p>"},{"location":"mkdocs/#tabbed-content","title":"Tabbed Content","text":"Tab 1Tab 2 <p>Tab 1 content mkdocs Second line here.</p> <p>Tab 2 content</p> <p><pre><code>=== \"Tab Name\"\n    Tab content\n</code></pre> </p> <ul> <li>not supported in obsidian</li> </ul>"},{"location":"mkdocs/#attr_list","title":"attr_list","text":"<p>Fancy Buttons mkdocs <code>[button text](link.md){ .md-button }</code> Tooltip I\u2019m a tooltip that you can hover or click. <code>[tooltip](https://link \"hover text\")</code> Annotation I\u2019m an annotation, but you need to click the plus icon (1) to show. (2) </p> <ol> <li>annotation 1</li> <li>annotation 2 <pre><code>Annotation location 1 (1), location (2)\n{ .annotate }\n1. annotation text to be shown\n</code></pre> </li> </ol> <p>Footnote Insert footnote like <code>[^1]</code> <sup>1</sup></p> <ul> <li>for inserting footnote <code>[^1]</code></li> <li><code>[^1]:</code> at the end to explain the footnote; not supported in obsidian</li> </ul>"},{"location":"mkdocs/#code-highlighting","title":"Code Highlighting","text":"<pre><code>from python import python\npython.run(arg1=123, arg2=\"mystr\")[2]\n</code></pre> <pre><code>#!/bin/bash\nvar=\"myvar\"\necho $var+3\n</code></pre> <pre><code># yaml highlighting has to be `yaml` not `yml` and it's broken\n---\nversion: \"2.1\"\nservices:\n  clarkson:\n    image: lscr.io/linuxserver/clarkson\n    container_name: clarkson\n    environment:\n\n      - PUID=1000\n      - PGID=1000\n    ports:\n      - 3000:3000\n    restart: unless-stopped\n</code></pre> <ol> <li> <p>explaining the footnote.\u00a0\u21a9</p> </li> </ol>"},{"location":"Cloud%20VPS/basic-server-setup-caddy-docker-jdownloader/","title":"Basic Server Setup, Caddy, Docker, JDownloader","text":"<p>Creating the VM in oracle cloud. </p> <ol> <li>Go to instances, new instance.</li> <li>Select the Always Free image, ARM or x86. 1 core only, recommended 4GB RAM, should be exceed 6 GB.</li> <li>Choose Ubuntu image.</li> <li>Download the SSH key and name it accordingly.</li> </ol> <p>Key Pair</p> <p>Using PuttyGen.</p> <ul> <li>Place the key in <code>./ssh/openssh_keys</code></li> <li>Open PuttyGen, conversion -&gt; import keys</li> <li>Save the key files as ppk file in root folder of <code>./ssh</code></li> </ul> <p>Putty</p> <ul> <li>Grab the IP address in the cloud console</li> <li>Give a name in saved sessions</li> <li>Go to behavior, choose these options</li> <li>Under Data, make sure Terminal-type string is xterm-256color</li> <li>Under Terminal -&gt; Features, check \u201cdisable application keypad mode\u201d to fix issues with nano</li> <li>The private key needs to be load in Connection -&gt; SSH -&gt; Auth -&gt; Credentials</li> </ul> <p></p> <p></p> <p>To get the IP address of the VPS at any time</p> <pre><code>curl ifconfig.me\n</code></pre> <p>Basic Setup + Docker</p> <ol> <li>Installing Caddy web server (simple to use reverse proxy), lightweight, easy and no need for docker. (Nginx is also a good candidate for reverse proxy as the command is easy to memorize and does not require consulting documentation sites. However, the syntax for nginx is extremely complex compared to caddy and might not be easily memorized.</li> </ol> <p>https://caddyserver.com/docs/install#debian-ubuntu-raspbian</p> <pre><code>sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list\nsudo apt update\nsudo apt install caddy net-tools\n# net-tools is good utility, optionally can install firewall-cmd or nginx\n# sudo apt install firewalld nginx\n</code></pre> <p>2. Install Docker</p> <p>https://docs.docker.com/engine/install/ubuntu/</p> <pre><code>sudo apt-get update\nsudo apt-get install \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-compose\n# code modified to install docker-compose, each space in paragraph indicates a separate step in their official blog\n</code></pre> <pre><code>sudo groupadd docker \\\nsudo usermod -aG docker ubuntu\nnewgrp docker # activate docker group immediately\n</code></pre> <p>The machine needs to be rebooted from Oracle Cloud console to finish installation.</p> <p>JDownloader</p> <p>https://hub.docker.com/r/jlesage/jdownloader-2</p> <pre><code>docker run -d \\\n    --name=jdownloader-2 \\\n    -p 5800:5800 \\\n    -v $HOME/appdata/jdownloader-2:/config:rw \\\n    -v $HOME/Downloads:/output:rw \\\n    --restart unless-stopped \\\n    jlesage/jdownloader-2\n</code></pre> <p>If port forwarding configured properly, entering ipaddress:5800 should work. If not open ports manually.</p> <pre><code>sudo iptables -I INPUT 6 -m state --state NEW -p tcp --dport 5800 -j ACCEPT\nsudo netfilter-persistent save\n</code></pre> <p>Other Useful Ports</p> <pre><code>sudo iptables -I INPUT 6 -m state --state NEW -p tcp --dport 443 -j ACCEPT\nsudo iptables -I INPUT 6 -m state --state NEW -p tcp --dport 80 -j ACCEPT\nsudo iptables -I INPUT 6 -m state --state NEW -p tcp --dport 25565 -j ACCEPT\nsudo iptables -I INPUT 6 -m state --state NEW -p tcp --dport 19132 -j ACCEPT\nsudo iptables -I INPUT 6 -m state --state NEW -p udp --dport 25565 -j ACCEPT\nsudo iptables -I INPUT 6 -m state --state NEW -p udp --dport 19132 -j ACCEPT\nsudo iptables -I INPUT 6 -m state --state NEW -p udp --dport 51820 -j ACCEPT\nsudo netfilter-persistent save\n</code></pre> <p>Alternative (firewall-cmd)</p> <pre><code>sudo apt install firewalld\n</code></pre> <p>Firewalld is a CentOS package, it may be unstable and crash, but command easy to memorize.</p> <pre><code>sudo firewall-cmd --zone=public --add-port 19132/tcp --permanent\nsudo firewall-cmd --zone=public --add-port 19132/udp --permanent\nsudo firewall-cmd --zone=public --add-port 25565/tcp --permanent\nsudo firewall-cmd --zone=public --add-port 25565/udp --permanent\nsudo firewall-cmd --zone=public --add-port 80/tcp --permanent\nsudo firewall-cmd --zone=public --add-port 443/tcp --permanent\nsudo firewall-cmd --zone=public --add-port 5800/tcp --permanent\nsudo firewall-cmd --reload\n</code></pre> <p>Troubleshooting network</p> <p>For firewall-cmd, use this command to check all open ports.</p> <pre><code>sudo firewall-cmd --list-all\n</code></pre> <p>Using netstat, or pipe it to grep</p> <pre><code>netstat -tln\n# | grep 8080 etc...\n</code></pre> <p>Configuring JDownloader</p> <ul> <li>Go to the JDownloader WebUI</li> <li>Go to Settings</li> <li>Under general, change the max number of downloads (2) and DL per hoster (1) to minimize issues</li> </ul> <p></p> <ul> <li>Go to MyJDownloader and configure MyJDownloader account</li> </ul> <p></p> <ul> <li>Go to extension modules, install and enable \u201cfolderwatch\u201d</li> </ul> <p></p> <p>The configuration for JDownloader is complete and should appear and be functional in WebUI. Advanced JDownloader documentation will be covered in detailed in another section. It is recommended to close port 5800 after configuring to prevent others accessing.</p> <p>Basic Caddy Syntax (if applicable)</p> <p>If the server that is being setup or restored needs functional service like bookstack or uptime-kuma, reverse proxy is needed.</p> <pre><code>sudo nano /etc/caddy/Caddyfile\n</code></pre> <pre><code>{\n    email weebly2x10@gmail.com\n}\n\nyour-uptime-kuma.yoursubdomain.duckdns.org {\n        reverse_proxy http://127.0.0.1:3001\n}\n\nwiki.yoursubdomain.duckdns.org {\n        reverse_proxy http://127.0.0.1:6975\n}\n</code></pre> <p>Advanced</p> <p>Tunneling Jellyfin and other web services with tailscale and caddy</p> <p>Minecraft Server tunneling via Nginx (tcp only)</p> <p>Minecraft Tunneling</p>"},{"location":"Cloud%20VPS/jdownloader/","title":"JDownloader","text":"<p>After setting up JDownloader and it appears well in WebUI.</p> <p>The section is useless now as UHDMV has shutdown and it\u2019s pointless to setup multiple automated JDownloader server on VPS.</p>"},{"location":"Cloud%20VPS/tunneling-basic-services-jellyfin-web-with-caddy-and-tailscale/","title":"Tunneling Basic Services (Jellyfin, Web) with Caddy and Tailscale","text":"<p>This procedure is not reproducible yet. Rigorous testing is still required before being documented. Here are the known procedures.</p> <p>The purpose is to tunnel normal web or network intensive traffic such as Jellyfin when faced with CG-NAT or similar situations (in this case locked down dorm internet), also configure hardware transcoding (in this case NVENC, but Intel QSV for future) to mitigate limitations with Canadian ISP(s).</p> <p>Jellyfin Install</p> <p>https://jellyfin.org/downloads/server</p> <p>Download and run the server installer.</p> <p>Jellyfin Server Configuration</p> <p>Tailscale (Windows Client)</p> <p>https://tailscale.com/download/windows</p> <p>Download, install and login.</p> <p>Tailscale (Linux Server)</p> <pre><code>curl -fsSL https://tailscale.com/install.sh | sh\n</code></pre> <pre><code>sudo tailscale up\n</code></pre> <p>All the tailscale management is done in the WebUI.</p> <p></p> <p>The Windows client is given a tailscale network IP address in 100 range. Check if Windows client is pingable on server.</p> <pre><code>ping 100.x.y.z\n</code></pre> <p>Check if Jellyfin is running and tunneled properly on Oracle cloud. It should get a webpage html rather than unable to resolve host etc.</p> <pre><code>curl http://100.x.y.z:8096\n</code></pre> <p>Reverse Proxy</p> <p>/Cloud%20VPS/basic-server-setup-caddy-docker-jdownloader</p> <p>Caddy installation and syntax is can be found on this page. Replace 127.0.0.1 with the tailscale IP address.</p> <pre><code>{\n    email weebly2x10@gmail.com\n}\n\nmovies.yoursubdomain.duckdns.org {\n        reverse_proxy http://100.x.y.z\n}\n</code></pre> <p>It is possible to set use the root domain (yoursub.duckdns.org) or a subfolder domain (movies.yousub.duckdns.org) for Jellyfin. After configuring the Caddyfile.</p> <pre><code>sudo systemctl reload caddy\n</code></pre> <p>Use netstat to check port 80, 443 is being listened. Make sure to port forward Oracle VPS.</p> <p>Other Services</p> <p>Follow the same syntax as the caddy file provided, if the root domain is used, then a subdomain must be used for other services.</p> <p>Results</p> <p>Inconclusive yet, more testing required.</p>"},{"location":"Cloud%20VPS/tunneling-minecraft-server-tcp-only-with-nginx/","title":"Tunneling Minecraft Server (tcp only) with Nginx","text":"<p>Procedure not reproducible yet, will be documented later.</p>"},{"location":"Computer%20Stuff/demucs-nvidia/","title":"Demucs Nvidia","text":"<p>Demucs is an music separation tool that has potential for a karaoke setup.</p> <p>https://github.com/facebookresearch/demucs</p> <p>https://www.youtube.com/watch?v=9QnFMKWEFcI&amp;t=585s</p> <p>https://docs.google.com/document/d/1XMmLrz-Tct1Hdb_PatcwEeBrV9Wrt15wHB1xhkB2oiY/edit</p> <p>Installation on PC with Nvidia</p> <ol> <li>Firstly install Anaconda. Download Anaconda for Windows https://www.anaconda.com/products/distribution</li> <li>Install PyTorch. https://pytorch.org/get-started/locally/. Select the correct version of pytorch.</li> <li>Install ffmpeg. [https://www.gyan.dev/ffmpeg/builds/]](assets/gallery/2022-12/TwJimage.png)</li> </ol> <p>Demucs</p> <p>After installing the prerequesties.</p> <p>Open \u201cAnaconda terminal\u201d and type</p> <pre><code>python.exe -m pip install -U demucs\n</code></pre> <pre><code>pip install PySoundFile \n</code></pre> <p>Running Demucs</p> <pre><code>demucs \"C:\\path\\to\\music\\file.mp3\"\n</code></pre> <p>This will run demucs with CUDA GPU acceleration, make sure to put the path in double quote. The extracted file will be found in the directory where you run the command eg. the default Anaconda prompt starts in ~/separated</p>"},{"location":"Docker%20Apps/bookstack/","title":"Bookstack","text":""},{"location":"Docker%20Apps/bookstack/#installation","title":"Installation","text":"<p>Change port to 6975</p> <p>Add in docker-compose: restart: unless-stopped</p> <p>$docker directory = /home/docker .... etc</p> <p>Docker-Compose file reference</p> <p>https://github.com/solidnerd/docker-bookstack/blob/master/docker-compose.yml</p> <pre><code>version: '2'\nservices:\n  mysql:\n    image: mysql:8.0\n    environment:\n\n    - MYSQL_ROOT_PASSWORD=secret\n    - MYSQL_DATABASE=bookstack\n    - MYSQL_USER=bookstack\n    - MYSQL_PASSWORD=secret\n    volumes:\n    - mysql-data:/var/lib/mysql\n    restart: unless-stopped\n\n  bookstack:\n    image: solidnerd/bookstack:22.10.2\n    depends_on:\n\n    - mysql\n    environment:\n    - DB_HOST=mysql:3306\n    - DB_DATABASE=bookstack\n    - DB_USERNAME=bookstack\n    - DB_PASSWORD=secret\n    #set the APP_ to the URL of bookstack without without a trailing slash APP_URL=https://example.com\n    - APP_URL=http://xxx.xxxmydomainxxx.duckdns.org\n    volumes:\n    - $docker/public-uploads:/var/www/bookstack/public/uploads\n    - $docker/storage-uploads:/var/www/bookstack/storage/uploads\n    ports:\n    - \"6975:8080\"\n    restart: unless-stopped\n</code></pre> <p>Notice: The default password for bookstack is</p> <p>admin@admin.com</p> <p>password</p> <p>Permissions: remember the set write permission on public-uploads folder so users can upload photos.</p>"},{"location":"Docker%20Apps/bookstack/#backup-and-restore","title":"Backup and Restore","text":"<p>Files Backup:</p> <pre><code>tar -czvf bookstack-files-backup.tar.gz public-uploads storage-uploads\n</code></pre> <p>Restore:</p> <pre><code>tar -xvzf bookstack-files-backup.tar.gz\n</code></pre> <p>Database backup:</p> <pre><code>sudo docker exec bookstack_mysql_1 /usr/bin/mysqldump -u root --password=secret bookstack &gt; ./bookstack/bookstack_db.sql\n</code></pre> <p>Restore:</p> <pre><code>sudo docker exec -i bookstack_mysql_1 mysql -u root --password=secret bookstack &lt; /$docker/bookstack/bookstack_db.sql\n</code></pre> <ul> <li>bookstack_mysql1 is the container name</li> <li>password is secret or the database password</li> </ul>"},{"location":"Docker%20Apps/bookstack/#reverse-proxy","title":"Reverse Proxy","text":"<p>Use subdomain in proxy manager.</p> <p>Backing Up and Restoring with LinuxServer.io container</p> <p>Due to limits or Oracle Cloud free tier. The only arm image is from linuxserver io container, and it is different than solidnerd image.</p> <p>Docker-Compose file</p> <pre><code>version: \"2\"\nservices:\n  bookstack:\n    image: lscr.io/linuxserver/bookstack\n    container_name: bookstack\n    environment:\n\n      - PUID=1001\n      - PGID=1001\n      - APP_URL=https://wiki.xxx.duckdns.org\n      - DB_HOST=bookstack_db\n      - DB_USER=bookstack\n      - DB_PASS=secret\n      - DB_DATABASE=bookstackapp\n    volumes:\n      - /home/ubuntu/bookstack:/config\n    ports:\n      - 6975:80\n    restart: unless-stopped\n    depends_on:\n      - bookstack_db\n\n  bookstack_db:\n    image: lscr.io/linuxserver/mariadb\n    container_name: bookstack_db\n    environment:\n\n      - PUID=1001\n      - PGID=1001\n      - MYSQL_ROOT_PASSWORD=secret\n      - TZ=Europe/London\n      - MYSQL_DATABASE=bookstackapp\n      - MYSQL_USER=bookstack\n      - MYSQL_PASSWORD=secret\n    volumes:\n      - /home/ubuntu/bookstack:/config\n    restart: unless-stopped\n</code></pre> <p>Notice: In Oracle cloud free tier, the default ubuntu user is 1001, not 1000. For database name, it it bookstackapp, keep in mind when executing restore command. The folder structure is also different. In the solidnerd container, the images are stored at /public-uploads while in LSIO container it is stored at /www/uploads</p>"},{"location":"Docker%20Apps/bookstack/#backing-up-from-home-pc","title":"Backing Up (from home PC)","text":"<p>Images</p> <p>cd into /public-uploads and make a tar archive</p> <pre><code>tar -czvf images.tar.gz images\n</code></pre> <p>Backup the database</p> <pre><code>sudo docker exec bookstack_mysql_1 /usr/bin/mysqldump -u root --password=secret bookstack &gt; ./bookstack_db.sql\n</code></pre> <p>Transfer to Oracle Cloud Server</p> <pre><code>scp -i oracle-arm-2.key images.tar.gz bookstack_db.sql ubuntu@$IPADDR:/home/ubuntu/bookstack/www/uploads\n</code></pre> <p>Take in consideration the location where LSIO image stores the images.</p>"},{"location":"Docker%20Apps/bookstack/#restore-into-oracle-cloud","title":"Restore (into Oracle Cloud)","text":"<p>Images (/home/ubuntu/bookstack/www/uploads)</p> <pre><code>tar -xvzf images.tar.gz\n</code></pre> <p>Database</p> <p>The image url in the database still refers to old server url, it needs to be changed. The following command replace the subdomain in the sq1 dump.</p> <pre><code>sed -i 's/wiki.$home.duckdns.org/wiki.$oracle.duckdns.org/g' bookstack_db.sql\n</code></pre> <p>Restore the database.</p> <pre><code>sudo docker exec -i bookstack_db mysql -u root --password=secret bookstackapp &lt; /home/ubuntu/bookstack/www/uploads/bookstack_db.sql\n</code></pre>"},{"location":"Docker%20Apps/bookstack/#crontab","title":"Crontab","text":"<p>On Home PC</p> <pre><code>0 23 * * 2,5 /home/karis/bookstack.sh\n</code></pre> <pre><code>#!/bin/bash\n\ncd ~/docker/bookstack/public-uploads #location of bookstack public uploads\ntar -czvf images.tar.gz images\nsudo docker exec bookstack_mysql_1 /usr/bin/mysqldump -u root --password=secret bookstack &gt; ./bookstack_db.sql\nscp -i oracle-arm-2.key images.tar.gz bookstack_db.sql ubuntu@$ORACLEIP:/home/ubuntu/bookstack/www/uploads\n</code></pre> <p>Make sure to copy the oracle-arm-2.key to the appropriate location (~/docker/bookstack/public-uploads)</p> <p>Also make sure the permission of oracle-arm-2.key is in correct permission (600). Especially changing the permission of public-uploads folder to allow write access.</p> <p>Do a backup sequence in crontab at 11pm every Tuesday and Friday.</p> <p>Oracle Cloud Server</p> <pre><code>0 8 * * 3,6 /home/ubuntu/bookstack.sh\n</code></pre> <pre><code>#!/bin/bash\n\ncd ~/bookstack/www/uploads #directory where bookstack files scp from home are located\ntar -xvzf images.tar.gz\nsed -i 's/wiki.$homeip.duckdns.org/wiki.$oracle.duckdns.org/g' bookstack_db.sql\nsudo docker exec -i bookstack_db mysql -u root --password=secret bookstackapp &lt; /home/ubuntu/bookstack/www/uploads/bookstack_db.sql\n</code></pre> <p>Restore the sequence after backup, every Wednesday and Saturday at 8am (need to consider the TZ between Vancouver, Edmonton and Toronto, or any the time zone of the remote server)</p>"},{"location":"Docker%20Apps/epic-games-free-games/","title":"Epic Games Free Games","text":"<p>Buy Free Games from Epic Games</p> <p>https://hub.docker.com/r/charlocharlie/epicgames-freegames</p> <p>Config</p> <p>NEED TO CHANGE</p> <p>Email: email address</p> <p>Password: password</p> <p>Webhook URL: make a discord channel and click settings. Go to integrations, then webhook, copy webhook URL.</p> <p>mentioned Users: right click your profile, and click Copy ID</p> <p>TOTP</p> <ol> <li>Go here to login. https://www.epicgames.com/account/password Login with Epic Games account.</li> <li>Click \u201cenable authenticator app.\u201d</li> <li>In the section labeled \u201cmanual entry key,\u201d copy the key.</li> <li>Use your authenticator app to add scan the QR code.</li> <li>Activate 2FA by completing the form and clicking activate.</li> <li>Once 2FA is enabled, use the key you copied as the value for the TOTP parameter.</li> </ol> <p>Docker</p> <pre><code>docker run -d -v /home/karis/docker/epicgames:/usr/app/config:rw -p 3000:3000 -m 2g --name epicgames --restart unless-stopped charlocharlie/epicgames-freegames:latest\n</code></pre> <p>Change the name of the container to a friendly name. Restart unless stopped so it restart automatically.</p> <p>Copy and Paste</p> <p>The default json configuration is located at /home/karis/docker/epicgames or $HOME/docker/epicgames.</p> <p>Fix Login Issue Using Cookies</p> <p>https://store.epicgames.com/en-US/</p> <ol> <li>Visit this site and make sure it\u2019s logged in.</li> <li>Install this extension EditThisCookie https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg/related</li> <li>Open the extension and change the url to epicgames.com/id as in screenshot below</li> <li>Export the cookie</li> </ol> <p></p> <ol> <li>Go to $HOME/docker/epicgames and create a new file email@gmail.com-cookies.json</li> <li>If the json file is already there, truncate it with \u2013size 0</li> <li>Paste the cookie value to the json file</li> <li>Restart container.</li> </ol> <p>Update</p> <pre><code>docker pull charlocharlie/epicgames-freegames:latest\ndocker rm -f epicgames\ndocker images | grep epicgames\n# use docker rmi to remote the corresponding image \n# re run the epicgames docker run command\n</code></pre>"},{"location":"Docker%20Apps/filebrowser/","title":"Filebrowser","text":"<p>Filebrowser app on a webbrowser, port 4455. free-games-claimer</p> <p>Docker-compose deployment</p> <pre><code>version: '3.9'\nservices:\n    filebrowser:\n        container_name: filebrowser\n        image: filebrowser/filebrowser\n        ports:\n\n            - '4455:80'\n        user: 1000:1000\n        restart: unless-stopped\n        volumes:\n            - '~/docker/filebrowser/.filebrowser.json:/.filebrowser.json'\n            - '~/docker/filebrowser/filebrowser.db:/database.db'\n            - '~/docker/filebrowser/branding:/branding'\n            - '~/docker:/srv/docker'\n            - '/mnt/data:/srv/data'\n            - '/mnt/nvme/share:/srv/nvme-share'\n</code></pre> <p>The first 3 bind mount are for configuration of filebrowser, eg. config, database and branding files. On first deployment, need to create an empty database.db file. The remaining bind mount are for the folders that need to be accessed, the folders should be bound under /srv.</p> <p>This is the content of <code>.filebrowser.json</code></p> <pre><code>{\n    \"port\": 80,\n    \"baseURL\": \"\",\n    \"address\": \"\",\n    \"log\": \"stdout\",\n    \"database\": \"/database.db\",\n    \"root\": \"/srv\"\n  }\n</code></pre>"},{"location":"Docker%20Apps/filebrowser/#usershare","title":"User/Share","text":"<p>The user and share management in filebrowser is simple. The shares have a expiring time, and can optionally have a password. The recipient can view and download files in the share but cannot upload.</p> <p>To create a new user, it\u2019s under settings -&gt; User Management, and add a user and password accordingly, and give appropriate permission. The scope is where the root folder where the user have access to, since the docker data folder is bound at /srv/docker and /srv is defined as root folder in config, the folder name to put in scopes would be <code>/docker</code>. Only one scope is allowed.</p> <p></p> <p>It is also possible to add rules to prevent user access of files within a scope. Under rules, enter the path that is relative to the scope, for example /docker/minecraft/config would be <code>/config</code></p> <p></p>"},{"location":"Docker%20Apps/filebrowser/#personalization","title":"Personalization","text":"<p>Enable dark theme - Setting -&gt; Global Settings -&gt; Branding</p> <ul> <li>also change the branding directory path to /branding which is bind mount in docker</li> </ul> <p>Under the branding folder, create a file <code>custom.css</code>which is used for css customization. Then create a folder img and place logo.svg in it for custom icon. The icon is the same as egow entertainment and stored in OliveTin icon PSD file. Under the folder img, create a folder icons and use favicon generator site to create an icon archive and put all the content of that archive in the icons folder, the result should look like this.</p> <p></p> <p>Reverse Proxy/Homepage</p> <p>Reverse proxy is normal procedure using NPM. To add bookmark to a file location, use browser/homepages bookmark function.</p>"},{"location":"Docker%20Apps/free-games-claimer/","title":"Free Games Claimer","text":"<p>https://github.com/vogler/free-games-claimer</p> <p>This is the Github repo for the new and advanced free games claimer. This is implemented after Epicgames FreeGames keeps failing.</p>"},{"location":"Docker%20Apps/free-games-claimer/#configuration","title":"Configuration","text":"<p>Using Docker-Compose</p> <p>In the folder structure</p> <pre><code>server: ~/docker/fgc$\ndocker-compose.yml\nfgc.env\n</code></pre> <p>fgc.env is the environment file for all the password/keys to login to different game services, fill it in manually or use a backup.</p> <pre><code>EG_OTPKEY=\nEG_EMAIL=\nEG_PASSWORD=\nNOTIFY=discord://123456/ABCD\nPG_EMAIL=\nPG_PASSWORD=\nGOG_EMAIL=\nGOG_PASSWORD=\nTIMEOUT=300\n</code></pre> <p><code>NOTIFY=discord://123456/ABCD</code> if the webhook looks like this <code>https://discord.com/api/webhooks/123456/ABCD</code></p> <p><code>TIMEOUT=300</code> sets the timeout to 300s before the container skip and error out due to EpicGames captcha problems. However, the impact on prime gaming and GOG are not tested.</p> <p>docker-compose.yml</p> <pre><code>services:\n  free-games-claimer:\n    container_name: FGC # is printed in front of every output line\n    image: ghcr.io/vogler/free-games-claimer # otherwise image name will be free-games-claimer-free-games-claimer\n    build: .\n    ports:\n\n      - \"5990:5900\" # VNC server\n      - \"5890:6080\" # noVNC (browser-based VNC client)\n    volumes:\n      - ~/docker/fgc:/fgc/data\n      - ~/docker/fgc/epic-games.js:/fgc/epic-games.js\n      - ~/docker/fgc/prime-gaming.js:/fgc/prime-gaming.js\n      - ~/docker/fgc/gog.js:/fgc/gog.js\n    command: bash -c \"node epic-games; node prime-gaming; node gog; echo sleeping; sleep 1d\"\n    env_file:\n      - fgc.env\n    restart: unless-stopped\n</code></pre> <p>This docker-compose file use the environment file fgc.env as indicated above and runs once every day. It also contains VNC server/web based client.</p>"},{"location":"Docker%20Apps/free-games-claimer/#missing-captcha-session","title":"Missing Captcha Session","text":"<p>This should no longer be needed. Edit the line to epicgames.js code and replace with the following message. When the captcha is missed, it will send a notification for manual claiming.</p> <pre><code>wait notify(`epic-games: got captcha challenge right before claim. Use VNC to solve it manually. Game link: \\n ${url}`)\n</code></pre> <p>EpicGames require a captcha to claim free games. If the 5 minute timeout window for EpicGames is missed, it is no longer possible to claim the games unless waiting for the next day, which due to the nature of discord notifications, there is a slim to none chance of catching the captcha at next day. To continuing claiming after acknowledging the missed session, use portainer, ConnectBot Android to temporarily restart the container to restore VNC session.</p> <p>In order to restore the default time of claiming the games. Eg. waking up on Thurs or Fri and a predictable time and claim games, use the linux at command.</p> <pre><code>t 9:20\n&gt; docker restart FGC\n&gt; &lt;EOT&gt;\n</code></pre> <p>This will run the command at 9:20 AM the next day. Ctrl-D to exit at prompt and verify the time is correct.</p>"},{"location":"Docker%20Apps/jlesage-vnc-apps/","title":"jlesage VNC Apps","text":"<p>VNC apps consists of desktop applications that have the GUI in a web browser, mostly from the creator jlesage.</p> <p>t least for apps from jlesage, it supports an environment variable. Create an environment file called <code>vnc.env</code></p> <p>The environment file can be reference in many docker images from jlesage using docker-compose. The current environment variable specify U/GID, time zone and make every app dark mode. It is also possible to set VNC passwords. This is the full list of environment variables.</p> <pre><code>USER_ID=1000\nGROUP_ID=1000\nTZ=America/Vancouver\nDARK_MODE=1\n</code></pre> <p>The jlesage apps have 2 ports, port 5800 for viewing the VNC app on a web browser on desktop; port 5900 is for VNC protocol that can be used in dedicated VNC viewer or mobile viewing.</p> <p>General Bind Mounts</p> <p>The appdata bind mount is located in the <code>~/docker/vnc</code>, as seen from the yml example, the vnc environment file <code>vnc.env</code> is placed in the appdata folder. For application requiring access to movie storage, the bind mount is on the corresponding hard drive or pool. As for applications requiring access to storage but not large media, it\u2019s best to put the files on a SSD.</p> <p>This is an example of VNC container of MKVToolNix. The vnc.yml file is backed up elsewhere.</p> <pre><code>    mkvtoolnix:\n        image: jlesage/mkvtoolnix\n        env_file:\n\n            - ./vnc/vnc.env\n        volumes:\n            - '/mnt/data/nzbget:/storage:rw'\n            - '~/docker/vnc/mkvtoolnix:/config:rw'\n        ports:\n            - '5820:5800'\n            - '5920:5900'\n        container_name: mkvtoolnix\n</code></pre> <p>Application Port Procedure</p> <p>The application port start from 5800/5900 for its corresponding access and add 10 for each application.</p> <p>JDownloader: 5800</p> <p>Firefox: 5810</p> <p>MKVToolNix: 5820</p> <p>MKVCleaver: 5840</p> <p>MegaBasterd: 5860 (no VNC viewer 59xx port)</p> <p>There are also some application specific setup. For applications accessing hard drive or intensive apps, it is best to stop when not used. Lazytainer and ContainerNursery and possibly using DNS server can help automate this process.</p> <p>JDownloader</p> <p>JDownloader Setup</p>"},{"location":"Docker%20Apps/media-apps/","title":"Media Apps","text":""},{"location":"Docker%20Apps/media-apps/#rich-media","title":"Rich Media","text":"<p>Hello Everyone</p> <p>This is a demo consisting of medias.</p> <p></p> <p>Some Code</p> <pre><code>docker-compose up -d\n</code></pre> <pre><code>import os\nimport time\n\nprint(\"hello world\")\nif a=b:\n  print(a)\nelif b=c:\n  try:\n    print(c)\n  except:\n    print(c+a)\nelse:\n  print(\"what is the meaning of life\")\n</code></pre> <p>More sample media</p> <p></p> <p>Portainer is a software for managing docker containers.</p>"},{"location":"Docker%20Apps/media-apps/#audiobookshelf","title":"Audiobookshelf","text":"<p>Audiobooks and podcasts.</p> <p>Docker-compose, place it in the media apps compose media.yml</p> <pre><code>version: \"3.7\"\nservices:\n  audiobookshelf:\n    image: ghcr.io/advplyr/audiobookshelf:latest\n    environment:\n\n      - AUDIOBOOKSHELF_UID=99\n      - AUDIOBOOKSHELF_GID=100\n    ports:\n      - 13378:80\n    volumes:\n      - /mnt/m/Audios/audiobooks:/audiobooks # hard drive mount\n      - /mnt/m/Audios/podcasts:/podcasts # hard drive mount\n      - $HOME/audiobookshelf/config:/config\n      - $HOME/audiobookshelf/metadata:/metadata\n    restart: unless-stopped\n</code></pre> <p>Using the software</p> <p>To add a library, go to settings, libraries and add the path as mounted in docker.</p> <p>Go to Users, change the root password and create a new user. Note, the user cannot scan library, only the root can do that.</p> <p></p> <p>Adding Media</p> <p>Make sure the contents are in a separate folder. Follow naming like this. A cover image can also be created. The best bitrate should be under 128 kbps for smooth playback.</p> <pre><code>/audiobooks\n--- ./Author - Book\n---  --- ./cover.jpg\n---  --- ./book - 001 or book - chapter 1\n---  --- ./book - 002\n---  --- ./book - 003\n</code></pre> <p>In the WebUI, make sure logged in as root. Go to settings, library and scan. It will scan the newly added media.</p> <p>If the media does not match or not have an image, go click the edit icon, go to Match, the best result is usually Audible.ca.</p> <p></p> <p>If the chapter does not match, chapters can be edited manually. Go to Chapter and Lookup.</p> <p>Mobile App</p> <p>https://play.google.com/store/apps/details?id=com.audiobookshelf.app</p> <p>Mobile app also has download functionality, however, the directory cannot be changed, the default for download is /Internal Storage/Download/{Podcast or Audiobook}</p> <p>The statistic of minutes listened is the actual minutes listened, not the minutes of audiobook progress listened (eg. playing at faster speed).</p> <p>Scripting (Windows)</p> <p>ffmpeg detect audio silence (for splitting a large audio file into multiple chapters)</p> <pre><code>ffmpeg -i input.mp3 -af silencedetect=n=-50dB:d=1.5 -f null -\n</code></pre> <pre><code>ffmpeg -i input.mp3 -af silencedetect=n=-50dB:d=1.5 -f null -loglevel debug 2&gt;&amp;1 - | findstr \"silence_duration\" | find /c /v \"\"\n</code></pre> <p>This will find silence parts below -50dB and duration threshold of 1.5s.</p> <p>The second code (windows cmd only) for linux use grep -c, finds how many silence parts can be detected, this should correlate to number of chapters.</p> <p>Once the optimal duration is set, use split.py.</p> <p>ffmpeg that remove silence from audio</p> <pre><code>ffmpeg -i input.mp4 -af silenceremove=stop_periods=-1:stop_duration=4:stop_threshold=-50dB -b:a 96k output.mp3\n</code></pre> <ul> <li>stop_duration (threshold duration for removing silence part)</li> <li>stop_periods = -1 (search for the entire audio track)</li> </ul> <p>Use edge_reader.py to utilize Edge AI reader to read the audiobook if only the pdf book is provided.</p> <p>After reading, put all the recorded files and pdf in the project folder and run processing.py twice.</p>"},{"location":"Docker%20Apps/minecraft/","title":"Minecraft","text":"<p>This chapter is about Minecraft setup in Docker server.</p>"},{"location":"Docker%20Apps/minecraft/#minecraft-prep-and-install","title":"Minecraft Prep and Install","text":"<p>Client Setup (Java + Online)</p> <ol> <li>Download Java</li> <li>Download OptiFine the latest version.</li> <li>On the official Minecraft client, go add a new installation and match the version with OptiFine.</li> <li>Download and try the official version, then install OptiFine with Java.</li> <li>Under Settings -&gt; Keep the Launcher open while games are running</li> </ol> <p>Client Setup (Java + Offline)</p> <ol> <li>Use the client PolyMC to enable offline play.</li> <li>Go to the right corner, manage accounts and create an offline account.</li> <li>Click on add an instance and follow the guide.</li> <li>To install OptiFine, need the official launcher first, then download OptiFine</li> <li>Extract OptiFine, the extracted file should be ending in _MOD.jar</li> <li>Open the jar file in WinRAR, then move the files from notch folder into the base folder. Save the jar archive.</li> <li>Go to PolyMC, right click on the instance, click Edit -&gt; Versions -&gt; Add to minecraft.jar and select the modified OptiFine.</li> </ol> <p>Docker Server Setup</p> <p>Docker-compose for minecraft server</p> <pre><code>version: \"3.9\"\nservices:\n  minecraft:\n    image: marctv/minecraft-papermc-server:latest\n    restart: unless-stopped\n    container_name: mcserver\n    environment:\n\n      - MEMORYSIZE=4G\n      - PAPERMC_FLAGS=\"\"\n      - PUID=1000\n      - PGID=1000\n    volumes:\n      - ~/docker/minecraft:/data:rw\n    ports:\n      - 25565:25565\n      - 19132:19132\n    stdin_open: true\n    tty: true\n</code></pre> <p>This downloads the latest version of Minecraft, to use another PaperMC version, need to build the image from scratch.</p> <p>Warning: PaperMC cannot be downgraded, only newerversion of PaperMC can be installed after first run.</p> <pre><code>git clone https://github.com/mtoensing/Docker-Minecraft-PaperMC-Server\n# go edit the \"ARG version=1.xx.x\" to the correct version\ndocker build -t marctv/mcserver:1.xx.x\n</code></pre> <p>Folders and Plugins</p> <p>Plugins are located in folder <code>./plugins</code> some plugins have .yml files. To update or download plugins, use scp, wget on the server or VSCode.</p> <p>The <code>world</code> folder consists of the save data. It is separated into world, nether, the_end.</p> <p>Before starting the server, the <code>eula.txt</code> must have eula=true.</p> <p><code>bukkit</code> and <code>spigot.yml</code> in the root folder are configuration files for PaperMC.</p> <p>Rcon Commands</p> <p>To access the rcon-cli, use <code>docker attach mcserver</code>, to exit, use Ctrl-P and Q, if using VSCode may need to edit keyboard shortcut.</p> <p>Editing VSCode Shortcut</p> <p>Press <code>Ctrl-Shift-P</code> and search for keyboard shortcut json.</p> <pre><code>[\n    {\n        \"key\": \"ctrl+p\",\n        \"command\": \"ctrl+p\",\n        \"when\": \"terminalFocus\"\n    },\n\n    {\n        \"key\": \"ctrl+q\",\n        \"command\": \"ctrl+q\",\n        \"when\": \"terminalFocus\"\n    },\n\n    {\n        \"key\": \"ctrl+e\",\n        \"command\": \"ctrl+e\",\n        \"when\": \"terminalFocus\"\n    }\n\n]\n</code></pre>"},{"location":"Docker%20Apps/minecraft/#useful-plugins","title":"Useful Plugins","text":"<p>WorldEdit</p> <p>EssentialX</p> <p>CoreProtect</p> <p>ViaVersions - allow other similar version to join the server without conflict</p> <p>Offline Mode/Mobile Bedrock</p> <p>To allow offline play for PC version. Change <code>server.properties</code> and edit these lines</p> <pre><code>enforce-whitelist=false\nonline-mode=false\n</code></pre> <p>Refer to Minecraft Prep and Install to install offline client.</p> <p>For bedrock compatibility, need the geyser plugin.</p> <p>Geyser</p> <p>To allows offline play for bedrock mobile version. Go to <code>./plugins/Geyser-Spigot/config.yml</code> and change these lines. Do not install the plugin floodgate, if it\u2019s installed, removed the plugin. ViaVersions is also needed for mobile play.</p> <pre><code>auth-type: offline\nenable-proxy-connections: true\n</code></pre> <p>Now client can play without login to Xbox or Java.</p> <p>WorldGuard</p>"},{"location":"Docker%20Apps/tesla-homepage/","title":"Tesla Homepage","text":"<p>This is a homepage that allows Tesla browser to enter full screen mode.</p> <p>Docker-compose</p> <pre><code>services:\n  homepage-for-tesla:\n    image: jessewebdotcom/homepage-for-tesla:latest\n    container_name: homepage-for-tesla\n    environment:\n\n      - DEFAULT_THEME=13\n    volumes:\n      - ~/docker/tesla/public/bookmarks.json:/app/public/bookmarks.json\n      - ~/docker/tesla/public/images:/app/public/images\n    ports:\n      - \"3000:3000\"\n</code></pre>"},{"location":"Docker%20Apps/Media%20Apps/audiobookshelf/","title":"Audiobookshelf","text":"<p>Audiobooks and podcasts.</p> <p>Docker-compose, place it in the media apps compose media.yml</p> <pre><code>version: \"3.7\"\nservices:\n  audiobookshelf:\n    image: ghcr.io/advplyr/audiobookshelf:latest\n    environment:\n\n      - AUDIOBOOKSHELF_UID=99\n      - AUDIOBOOKSHELF_GID=100\n    ports:\n      - 13378:80\n    volumes:\n      - /mnt/m/Audios/audiobooks:/audiobooks # hard drive mount\n      - /mnt/m/Audios/podcasts:/podcasts # hard drive mount\n      - $HOME/audiobookshelf/config:/config\n      - $HOME/audiobookshelf/metadata:/metadata\n    restart: unless-stopped\n</code></pre> <p>Using the software</p> <p>To add a library, go to settings, libraries and add the path as mounted in docker.</p> <p>Go to Users, change the root password and create a new user. Note, the user cannot scan library, only the root can do that.</p> <p></p> <p>Adding Media</p> <p>Make sure the contents are in a separate folder. Follow naming like this. A cover image can also be created. The best bitrate should be under 128 kbps for smooth playback.</p> <pre><code>/audiobooks\n--- ./Author - Book\n---  --- ./cover.jpg\n---  --- ./book - 001 or book - chapter 1\n---  --- ./book - 002\n---  --- ./book - 003\n</code></pre> <p>In the WebUI, make sure logged in as root. Go to settings, library and scan. It will scan the newly added media.</p> <p>If the media does not match or not have an image, go click the edit icon, go to Match, the best result is usually Audible.ca.</p> <p></p> <p>If the chapter does not match, chapters can be edited manually. Go to Chapter and Lookup.</p> <p>Mobile App</p> <p>https://play.google.com/store/apps/details?id=com.audiobookshelf.app</p> <p>Mobile app also has download functionality, however, the directory cannot be changed, the default for download is /Internal Storage/Download/{Podcast or Audiobook}</p> <p>The statistic of minutes listened is the actual minutes listened, not the minutes of audiobook progress listened (eg. playing at faster speed).</p> <p>Scripting (Windows)</p> <p>ffmpeg detect audio silence (for splitting a large audio file into multiple chapters)</p> <pre><code>ffmpeg -i input.mp3 -af silencedetect=n=-50dB:d=1.5 -f null -\n</code></pre> <pre><code>ffmpeg -i input.mp3 -af silencedetect=n=-50dB:d=1.5 -f null -loglevel debug 2&gt;&amp;1 - | findstr \"silence_duration\" | find /c /v \"\"\n</code></pre> <p>This will find silence parts below -50dB and duration threshold of 1.5s.</p> <p>The second code (windows cmd only) for linux use grep -c, finds how many silence parts can be detected, this should correlate to number of chapters.</p> <p>Once the optimal duration is set, use split.py.</p> <p>ffmpeg that remove silence from audio</p> <pre><code>ffmpeg -i input.mp4 -af silenceremove=stop_periods=-1:stop_duration=4:stop_threshold=-50dB -b:a 96k output.mp3\n</code></pre> <ul> <li>stop_duration (threshold duration for removing silence part)</li> <li>stop_periods = -1 (search for the entire audio track)</li> </ul> <p>Use edge_reader.py to utilize Edge AI reader to read the audiobook if only the pdf book is provided.</p> <p>After reading, put all the recorded files and pdf in the project folder and run processing.py twice.</p>"},{"location":"Docker%20Apps/Media%20Apps/rich-media/","title":"Rich Media","text":"<p>Hello Everyone</p> <p>This is a demo consisting of medias.</p> <p></p> <p>Some Code</p> <pre><code>docker-compose up -d\n</code></pre> <pre><code>import os\nimport time\n\nprint(\"hello world\")\nif a=b:\n  print(a)\nelif b=c:\n  try:\n    print(c)\n  except:\n    print(c+a)\nelse:\n  print(\"what is the meaning of life\")\n</code></pre> <p>More sample media</p> <p></p> <p>Portainer is a software for managing docker containers.</p>"},{"location":"Docker%20Apps/Minecraft/minecraft-prep-and-install/","title":"Minecraft Prep and Install","text":"<p>Client Setup (Java + Online)</p> <ol> <li>Download Java</li> <li>Download OptiFine the latest version.</li> <li>On the official Minecraft client, go add a new installation and match the version with OptiFine.</li> <li>Download and try the official version, then install OptiFine with Java.</li> <li>Under Settings -&gt; Keep the Launcher open while games are running</li> </ol> <p>Client Setup (Java + Offline)</p> <ol> <li>Use the client PolyMC to enable offline play.</li> <li>Go to the right corner, manage accounts and create an offline account.</li> <li>Click on add an instance and follow the guide.</li> <li>To install OptiFine, need the official launcher first, then download OptiFine</li> <li>Extract OptiFine, the extracted file should be ending in _MOD.jar</li> <li>Open the jar file in WinRAR, then move the files from notch folder into the base folder. Save the jar archive.</li> <li>Go to PolyMC, right click on the instance, click Edit -&gt; Versions -&gt; Add to minecraft.jar and select the modified OptiFine.</li> </ol> <p>Docker Server Setup</p> <p>Docker-compose for minecraft server</p> <pre><code>version: \"3.9\"\nservices:\n  minecraft:\n    image: marctv/minecraft-papermc-server:latest\n    restart: unless-stopped\n    container_name: mcserver\n    environment:\n\n      - MEMORYSIZE=4G\n      - PAPERMC_FLAGS=\"\"\n      - PUID=1000\n      - PGID=1000\n    volumes:\n      - ~/docker/minecraft:/data:rw\n    ports:\n      - 25565:25565\n      - 19132:19132\n    stdin_open: true\n    tty: true\n</code></pre> <p>This downloads the latest version of Minecraft, to use another PaperMC version, need to build the image from scratch.</p> <p>Warning: PaperMC cannot be downgraded, only newerversion of PaperMC can be installed after first run.</p> <pre><code>git clone https://github.com/mtoensing/Docker-Minecraft-PaperMC-Server\n# go edit the \"ARG version=1.xx.x\" to the correct version\ndocker build -t marctv/mcserver:1.xx.x\n</code></pre> <p>Folders and Plugins</p> <p>Plugins are located in folder <code>./plugins</code> some plugins have .yml files. To update or download plugins, use scp, wget on the server or VSCode.</p> <p>The <code>world</code> folder consists of the save data. It is separated into world, nether, the_end.</p> <p>Before starting the server, the <code>eula.txt</code> must have eula=true.</p> <p><code>bukkit</code> and <code>spigot.yml</code> in the root folder are configuration files for PaperMC.</p> <p>Rcon Commands</p> <p>To access the rcon-cli, use <code>docker attach mcserver</code>, to exit, use Ctrl-P and Q, if using VSCode may need to edit keyboard shortcut.</p> <p>Editing VSCode Shortcut</p> <p>Press <code>Ctrl-Shift-P</code> and search for keyboard shortcut json.</p> <pre><code>[\n    {\n        \"key\": \"ctrl+p\",\n        \"command\": \"ctrl+p\",\n        \"when\": \"terminalFocus\"\n    },\n\n    {\n        \"key\": \"ctrl+q\",\n        \"command\": \"ctrl+q\",\n        \"when\": \"terminalFocus\"\n    },\n\n    {\n        \"key\": \"ctrl+e\",\n        \"command\": \"ctrl+e\",\n        \"when\": \"terminalFocus\"\n    }\n\n]\n</code></pre>"},{"location":"Docker%20Apps/Minecraft/useful-plugins/","title":"Useful Plugins","text":"<p>WorldEdit</p> <p>EssentialX</p> <p>CoreProtect</p> <p>ViaVersions - allow other similar version to join the server without conflict</p> <p>Offline Mode/Mobile Bedrock</p> <p>To allow offline play for PC version. Change <code>server.properties</code> and edit these lines</p> <pre><code>enforce-whitelist=false\nonline-mode=false\n</code></pre> <p>Refer to Minecraft Prep and Install to install offline client.</p> <p>For bedrock compatibility, need the geyser plugin.</p> <p>Geyser</p> <p>To allows offline play for bedrock mobile version. Go to <code>./plugins/Geyser-Spigot/config.yml</code> and change these lines. Do not install the plugin floodgate, if it\u2019s installed, removed the plugin. ViaVersions is also needed for mobile play.</p> <pre><code>auth-type: offline\nenable-proxy-connections: true\n</code></pre> <p>Now client can play without login to Xbox or Java.</p> <p>WorldGuard</p>"},{"location":"Linux%20Server/debian-based-server-setup/","title":"Debian-Based Server Setup","text":"<p>Debian 12 with Desktop</p> <p>Run update and upgrade distro first. Install NTP package is there are errors with that. Reboot</p> <p>Setup powertop and powersaving features</p> <pre><code>sudo apt install powertop\npowertop --auto-tune\n</code></pre> <p>Powersave governor and at reboot. Remember to run the command again</p> <pre><code>@reboot echo \"powersave\" | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor &gt;/dev/null 2&gt;&amp;1\n</code></pre> <p>Ensure these packages are installedi</p> <pre><code>powertop htop iotop fio curl gnupg wget ntfs-3g neofetch ca-certificates lsb-release hdparm hd-idle openssh-server\n</code></pre> <p>HDD</p> <p><code>lsblk</code> and <code>blkid</code> to get the ntfs hard drive /dev name and the /dev/by-uuid/\u2026</p> <p>Edit the fstab to mount the drive, same entry for nvme drive</p> <pre><code>UUID=CC34294F34293E38 /mnt/data ntfs-3g 0 0\n</code></pre> <p>If the mounted device is HDD array, need to spindown disk with hdparm</p> <pre><code>hdparm -B 120 /dev/sdb # set the APM level\nhdparm -S 241 /dev/sdb\n</code></pre> <p>For the -S spindown, 0-240 is multiple of 5s, 241-255 is multiple of 30 min. The above command set spindown every 30min.</p> <p>If hdparm does not work, hd-idle can be used. Edit the file in <code>/etc/defaults/hd-idle</code></p> <pre><code>-i 60 -a disk/by-uuid/xxx -l /var/log/hd-idle.log\n</code></pre> <p>Sudo without password, go to visudo and add the lines to the bottom, replace $USER with the actual username.</p> <pre><code>$USER ALL=(ALL) NOPASSWD: ALL\n</code></pre> <p>Edit shortcuts in bashrc</p> <pre><code>source .bashrc\n</code></pre> <p>OpenSSH with Keys</p> <p>Generate the key using the terminal</p> <pre><code>ssh-keygen\n</code></pre> <ul> <li>give a location to put the key pair</li> <li>this generate a public (.pub) and private key pair</li> </ul> <pre><code>ssh-copy-id -i key.pub username@server\n</code></pre> <ul> <li><code>key.pub</code> is the public key that was generated</li> </ul> <p>The key is ready to use for authorization.</p> <p>Generate keys using PuTTY software</p> <p></p> <ol> <li>Copy the red part and use nano to add it in the server <code>~/.ssh/authorized_keys</code></li> <li>Make sure permissions are correct</li> <li><code>bash     mkdir -p ~/.ssh     chmod 700 ~/.ssh     chmod 600 ~/.ssh/authorized_keys     nano ~/.ssh/authorized_keys</code></li> <li>Save private key as ppk file on the root ssh folder.</li> <li> <p>If the client with private key is Linux machine, need to change the permission of the private key.</p> <pre><code>chmod 600 private.key\n</code></pre> </li> <li> <p>Convert the private key Conversion &gt; Export OpenSSH Keys and save the file to a folder OpenSSH Keys</p> </li> </ol> <p>Setting Up SMB</p> <p>Refer to Samba(SMB) Setup to setup SMB server.</p> <p>Desktop Environment Setup</p> <p>Firefox</p> <p>The location of firefox profile is at /home/$USER/.mozilla/firefox/xxxxx.default</p> <p>Make a tarball and copy it and extract it in destination.</p> <p>In the profile folder, look for compatibility.ini, go to a random profile in the dest machine and copy the compatibility.ini settings to the one that is copied over. This ensure compatibility so that the new profile works without warning.</p> <p>Check the profile.ini with the name and the location of the new profile folder, firefox should be the same as before.</p> <pre><code>[Profile0]\nName=karis\nIsRelative=1\nPath=ims58kbd.default-esr-1\n</code></pre> <p>Themes</p> <p>To backup/restore settings of cinnamon</p> <p>Icons</p> <p>The icons are located at these locations.</p> <pre><code>/usr/share/icons\n~/.icons\n</code></pre> <p>Scripts</p> <p>Copy the scripts and put it into ~/script for organization and copy the old crontab for executing these scripts.</p>"},{"location":"Linux%20Server/olivetin/","title":"OliveTin","text":"<p>OliveTin exposes a webpage with buttons that execute shell command (eg. docker, scripts) on the server and allow others for easy access. It should be used internally only.</p> <p>Installation</p> <p>Download the correct file from this site. https://github.com/OliveTin/OliveTin/releases OliveTin_linux_amd64.deb</p> <p>Go to the directory and install the package.</p> <pre><code>sudo dpkg -i OliveTin\u2026\u200bdeb\nsudo systemctl enable --now OliveTin\n</code></pre> <p>Configuration</p> <p>The configuration file is located at <code>&lt;em&gt;/etc/OliveTin/config.yaml\u00a0&lt;/em&gt;</code></p> <p>Example Configuration</p> <pre><code>listenAddressSingleHTTPFrontend: 0.0.0.0:1378 # set the port of OliveTin to 1378\n\n# Choose from INFO (default), WARN and DEBUG\nlogLevel: \"INFO\"\n\n# Actions (buttons) to show up on the WebUI:\nactions:\n  # This will run a simple script that you create.\n\n- title: Update Music\n  shell: /home/karis/scripts/script\n  icon: '&amp;#127925'\n</code></pre> <p>More possible configurations (many are not possible on Docker)</p> <p>Execute a shell command with textbox input.</p> <pre><code>- title: Restart a Docker CT\n  icon: '&lt;img src = \"icons/restart.png\" width=\"48px\" /&gt;'\n  shell: docker restart {{ container }}\n  arguments:\n    - name: container\n      type: ascii\n</code></pre> <ul> <li>use {{ }} and give a variable</li> <li>under arguments type, assign a type for it, ascii only allows letters and numbers</li> </ul> <p>Execute a shell command with choices</p> <pre><code>- title: Manage Docker Stack Services\n  icon: \"&amp;#128736;\"\n  shell: docker-compose -f /home/karis/docker/bookstack/docker-compose.yml {{ action }}\n  arguments:\n    - name: action\n      choices:\n        - title: Start Stack\n          value: up -d\n\n\n        - title: Stop Stack\n          value: down\n</code></pre> <p>This example give choices to start or stop a docker stack of a docker-compose file. If a argument is given the parameter choices, it will be in dropdown mode.</p> <p>Icons Customization</p> <p>The icons need to be placed in a folder in /var/www/[icon-folder]/icon.png. To use the icons, offline image or web address, it should be in HTML format. The size of 48px is the default size of OliveTin icons. Other CSS options such as <code>&lt;em&gt;style=\"background-color: white;\"&lt;/em&gt;</code> also works.</p> <pre><code>icon: '&lt;img src = \"icons/minecraft.png\" size=\"48px\" /&gt;'\n</code></pre> <p>Icon with emoji, to use emoji, need to use the html code. https://symbl.cc/en/emoji/</p> <p>For example, <code>&amp;#9786;</code> \ud83d\ude0a.</p> <pre><code>icon: \"&amp;#9786;\"\n</code></pre> <p>Icon Management</p> <p>The default icon folder is <code>/var/www/olivetin/icons</code></p> <p>The icon folder of all homelab icons is in <code>~/icons/homelab</code></p> <p>API</p> <p>Simple action button.</p> <pre><code>curl -X POST \"http://mediaserver:1378/api/StartAction\" -d '{\"actionName\": \"Update Music\"}'\n</code></pre> <p>Action with Arguments.</p> <pre><code>curl -X POST 'http://mediaserver:1378/api/StartAction' -d '{\"actionName\": \"Rename Movies\", \"arguments\": [{\"name\": \"path\", \"value\": \"value\"}]}'\n</code></pre>"},{"location":"Linux%20Server/sambasmb-setup/","title":"Samba(SMB) Setup","text":""},{"location":"Linux%20Server/sambasmb-setup/#setting-up-smb-server-on-linux","title":"Setting up SMB Server on Linux","text":"<p>Install the samba tool on Linux.</p> <pre><code>sudo apt update\nsudo apt install samba -y\n</code></pre> <p>Edit the <code>/etc/samba/smb.conf</code></p> <pre><code>[nvme_share]\n   comment = NVMe Share\n   path = /mnt/nvme/share\n   browseable = yes\n   read only = no\n</code></pre> <p><code>nvme_share</code> is the name of the Samba path which will appear in SMB clients and its path is accessed by <code>\\\\192.168.0.1\\nvme_share</code></p> <p></p> <p><code>path</code> is the location where the files are stored</p> <p><code>browseable</code> and <code>read only</code> are flags that are needed to make sure read/write access on the SMB share</p> <p>Lastly, add the user and password for the SMB share</p> <pre><code>sudo smbpasswd -a $USER # enter the password twice\n</code></pre>"},{"location":"OpenMediaVault/initial-setup-docker/","title":"Initial Setup, Docker","text":"<ol> <li>instruction 1</li> <li>instruction 2</li> <li>New instruction</li> </ol>"}]}